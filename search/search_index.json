{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"docs-template \u00b6","title":"Overview"},{"location":"#docs-template","text":"","title":"docs-template"},{"location":"CHANGELOG/","text":"","title":"Changelog"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at here . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ . Translations are available here .","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at here . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ . Translations are available here .","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing to docs-template \u00b6 We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer We Develop with Github \u00b6 We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow \u00b6 Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. If you've changed APIs, update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Any contributions you make will be under the specified Software License \u00b6 License contents are located in LICENSE.md file. In short, when you submit code changes, your submissions are understood to be under the same license that covers the project. Feel free to contact the maintainers if that's a concern. Report bugs via Github Issues \u00b6 We use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy! Use a Consistent Coding Style \u00b6 Automated linters and checkers are run on each Pull Request in order to ensure consistent styling across the codebase. Please do not merge without resolving these issues first! License \u00b6 By contributing, you agree that your contributions will be licensed under the aforementioned license. References \u00b6 This document was adapted from the open-source contribution guidelines created by Brian A. Danielak","title":"Contributing"},{"location":"CONTRIBUTING/#contributing-to-docs-template","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Submitting a fix Proposing new features Becoming a maintainer","title":"Contributing to docs-template"},{"location":"CONTRIBUTING/#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests.","title":"We Develop with Github"},{"location":"CONTRIBUTING/#we-use-github-flow","text":"Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. If you've changed APIs, update the documentation. Ensure the test suite passes. Make sure your code lints. Issue that pull request!","title":"We Use Github Flow"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-specified-software-license","text":"License contents are located in LICENSE.md file. In short, when you submit code changes, your submissions are understood to be under the same license that covers the project. Feel free to contact the maintainers if that's a concern.","title":"Any contributions you make will be under the specified Software License"},{"location":"CONTRIBUTING/#report-bugs-via-github-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy!","title":"Report bugs via Github Issues"},{"location":"CONTRIBUTING/#use-a-consistent-coding-style","text":"Automated linters and checkers are run on each Pull Request in order to ensure consistent styling across the codebase. Please do not merge without resolving these issues first!","title":"Use a Consistent Coding Style"},{"location":"CONTRIBUTING/#license","text":"By contributing, you agree that your contributions will be licensed under the aforementioned license.","title":"License"},{"location":"CONTRIBUTING/#references","text":"This document was adapted from the open-source contribution guidelines created by Brian A. Danielak","title":"References"},{"location":"initialization/","text":"Initialization \u00b6 What happens after I click Use this template ? More or less the following (for everry template): .github/workflows/initialization.yml is run This workflow changes every {{cookiecutter.<variable>}} to appropriate value based on your GitHub's <name>/<repo> (this includes folders being renamed, text being replaced and so on...) Leftover files (including initialization.yml ) are removed Those changes are pushed back to the repository by GitHub Actions Bot Labels used for automated change labeling are cloned from our source repository The best thing - it is automated, you don't even have to think about it!","title":"Template initialization"},{"location":"initialization/#initialization","text":"What happens after I click Use this template ? More or less the following (for everry template): .github/workflows/initialization.yml is run This workflow changes every {{cookiecutter.<variable>}} to appropriate value based on your GitHub's <name>/<repo> (this includes folders being renamed, text being replaced and so on...) Leftover files (including initialization.yml ) are removed Those changes are pushed back to the repository by GitHub Actions Bot Labels used for automated change labeling are cloned from our source repository The best thing - it is automated, you don't even have to think about it!","title":"Initialization"},{"location":"py-template/functionality/","text":"Functionality of py-template \u00b6 Please see template/functionality for base functionality, this templates only adjusts and extends it to be more useful for Python! Below is a detailed list of functionalities and their locations within source code (so you can modify them if you wish with ease), functionalities provided by base templates are not repeated here : Local development \u00b6 In order to have the exact same configuration as is run in pipelines described below do the following: clone your repository run poetry install --all-extras Now you are able to autofix / lint / run tests in the exact same way! Note: you might have to read the following sections for exact commands being run, although most of it is specified via pyproject.toml . Tooling configuration \u00b6 All of the easily tunable parameters are located in pyproject.toml including: Tests dependencies/settings Automated fixers dependencies/settings Linters dependencies/settings Code statistics reporting Documentation creation/styling Semantic release Automated code fixing/linting \u00b6 After opening a PR your code will be subject to the following: Whatever is possible will be fixed and pushed back to the branch (e.g. black formatting, removing unused import s etc.) Linters are run on formatted version to find errors which we are unable to fix automatically Code statistics are run and saved as GitHub Job Summaries Note: Please git pull from remote before pushing more code to the branch due to automated fixers! Pipeline is defined in .github/workflows/python-code-checker.yml while settings are defined in pyproject.toml (code comment sections Fixers, Linters and Reporters) Continuous Integration \u00b6 We provide a dummy folder tests , where all of your pytest s should reside. After every Pull Request the following pipeline is run: Tests are run across matrix of python and os versions (last three minor versions and ubuntu-latest / macos-latest ) Coverage is calculated for every item and uploaded as HTML report Coverage is combined and uploaded as HTML report One can check either the HTML reports after downloading, or checking GitHub Actions status directly. See .github/actions/python-test/action.yml for core functionality and .github/workflows/python-tests.yml for its usage in a workflow. Continuous Deployment \u00b6 After a PR is thoroughly checked and finally merged, py-template will take care of deploying your python package to package registry of your choice (see Setup section). Please see .github/workflows/python-release.yml for the pipeline functionality. And finally... Automated documentation generation \u00b6 Every documented function will automatically be added to API Reference section, which exactly models your source code. This action is performed after Continuous Deployment ran successfully. One can see the script responsible for it in docs/gen_ref_pages.py In general, simply add code to src/<repo-name> and watch it automagically appear via mkdocs.yml Please note we are also validating you have sufficiently documented your code via automated action .github/workflows/python-docstrings-coverage.yml (anything below 100 won't pass, fortunately it is easily tunable :) ) Caching (additional info, advanced) \u00b6 We tried our best in order to improve pipelines efficiency as much as possible. In order to do that, we have created a two level caching mechanism: pipx is cached on a per-python, per-os level poetry is cached on a per-python, per-os level This means initial pass of your actions might be a lot slower (even a couple minutes), but after the initial run everything will be simply downloaded from cache. To see how we did it (or modify/improve it), check .github/actions/setup-poetry/action.yml","title":"Functionality and Configuration"},{"location":"py-template/functionality/#functionality-of-py-template","text":"Please see template/functionality for base functionality, this templates only adjusts and extends it to be more useful for Python! Below is a detailed list of functionalities and their locations within source code (so you can modify them if you wish with ease), functionalities provided by base templates are not repeated here :","title":"Functionality of py-template"},{"location":"py-template/functionality/#local-development","text":"In order to have the exact same configuration as is run in pipelines described below do the following: clone your repository run poetry install --all-extras Now you are able to autofix / lint / run tests in the exact same way! Note: you might have to read the following sections for exact commands being run, although most of it is specified via pyproject.toml .","title":"Local development"},{"location":"py-template/functionality/#tooling-configuration","text":"All of the easily tunable parameters are located in pyproject.toml including: Tests dependencies/settings Automated fixers dependencies/settings Linters dependencies/settings Code statistics reporting Documentation creation/styling Semantic release","title":"Tooling configuration"},{"location":"py-template/functionality/#automated-code-fixinglinting","text":"After opening a PR your code will be subject to the following: Whatever is possible will be fixed and pushed back to the branch (e.g. black formatting, removing unused import s etc.) Linters are run on formatted version to find errors which we are unable to fix automatically Code statistics are run and saved as GitHub Job Summaries Note: Please git pull from remote before pushing more code to the branch due to automated fixers! Pipeline is defined in .github/workflows/python-code-checker.yml while settings are defined in pyproject.toml (code comment sections Fixers, Linters and Reporters)","title":"Automated code fixing/linting"},{"location":"py-template/functionality/#continuous-integration","text":"We provide a dummy folder tests , where all of your pytest s should reside. After every Pull Request the following pipeline is run: Tests are run across matrix of python and os versions (last three minor versions and ubuntu-latest / macos-latest ) Coverage is calculated for every item and uploaded as HTML report Coverage is combined and uploaded as HTML report One can check either the HTML reports after downloading, or checking GitHub Actions status directly. See .github/actions/python-test/action.yml for core functionality and .github/workflows/python-tests.yml for its usage in a workflow.","title":"Continuous Integration"},{"location":"py-template/functionality/#continuous-deployment","text":"After a PR is thoroughly checked and finally merged, py-template will take care of deploying your python package to package registry of your choice (see Setup section). Please see .github/workflows/python-release.yml for the pipeline functionality. And finally...","title":"Continuous Deployment"},{"location":"py-template/functionality/#automated-documentation-generation","text":"Every documented function will automatically be added to API Reference section, which exactly models your source code. This action is performed after Continuous Deployment ran successfully. One can see the script responsible for it in docs/gen_ref_pages.py In general, simply add code to src/<repo-name> and watch it automagically appear via mkdocs.yml Please note we are also validating you have sufficiently documented your code via automated action .github/workflows/python-docstrings-coverage.yml (anything below 100 won't pass, fortunately it is easily tunable :) )","title":"Automated documentation generation"},{"location":"py-template/functionality/#caching-additional-info-advanced","text":"We tried our best in order to improve pipelines efficiency as much as possible. In order to do that, we have created a two level caching mechanism: pipx is cached on a per-python, per-os level poetry is cached on a per-python, per-os level This means initial pass of your actions might be a lot slower (even a couple minutes), but after the initial run everything will be simply downloaded from cache. To see how we did it (or modify/improve it), check .github/actions/setup-poetry/action.yml","title":"Caching (additional info, advanced)"},{"location":"py-template/setup/","text":"Setup of py-template \u00b6 TLDR: same as README.md , but needs GitHub Actions Secrets set on a repo/organization level. WARNING: use repository name which is ABSENT from pypi.org or package index of your choosing. Initial Setup \u00b6 Click green button Use this template Name your repository, but remember to use NAME ABSENT in pypi.org and use snake_case for a name! Optional (but recommended): add main branch protection Setup Credentials for package release \u00b6 If you don't want to release your package, you don't have to do this step! Please add to your repository's Encrypted Secrets the following: PYPI_NAME - any name of package index, e.g. pypi or test-pypi PYPI_URL - url to hosting: https://test.pypi.org/legacy/ - for test-pypi https://pypi.org/legacy/ - for pypi PYPI_TOKEN - account-wide token allowing for package creation Additionally for gemfury.com \u00b6 To upload to gemfury.com one has to manually add: poetry config http-basic.dialogue ${{ secrets.PYPI_TOKEN }} ${{ secrets.PYPI_TOKEN }} as the first command in Deploy to registry here .","title":"Setup"},{"location":"py-template/setup/#setup-of-py-template","text":"TLDR: same as README.md , but needs GitHub Actions Secrets set on a repo/organization level. WARNING: use repository name which is ABSENT from pypi.org or package index of your choosing.","title":"Setup of py-template"},{"location":"py-template/setup/#initial-setup","text":"Click green button Use this template Name your repository, but remember to use NAME ABSENT in pypi.org and use snake_case for a name! Optional (but recommended): add main branch protection","title":"Initial Setup"},{"location":"py-template/setup/#setup-credentials-for-package-release","text":"If you don't want to release your package, you don't have to do this step! Please add to your repository's Encrypted Secrets the following: PYPI_NAME - any name of package index, e.g. pypi or test-pypi PYPI_URL - url to hosting: https://test.pypi.org/legacy/ - for test-pypi https://pypi.org/legacy/ - for pypi PYPI_TOKEN - account-wide token allowing for package creation","title":"Setup Credentials for package release"},{"location":"py-template/setup/#additionally-for-gemfurycom","text":"To upload to gemfury.com one has to manually add: poetry config http-basic.dialogue ${{ secrets.PYPI_TOKEN }} ${{ secrets.PYPI_TOKEN }} as the first command in Deploy to registry here .","title":"Additionally for gemfury.com"},{"location":"template/functionality/","text":"Functionality of template \u00b6 Below is a detailed list of functionalities and their locations within source code (so you can modify them if you wish with ease): Automated updates \u00b6 These are carried out by renovatebot/renovate at least once a day. Each time a new version of any dependency of your project is released, a Pull Request will be created and merged automatically (after all tests pass of course). You can find our settings in renovate.json Automated code changes labeling \u00b6 Every file/folder provided by our templates has an associated label, so you always know what kind of file was change by the PR! After a PR changing some file is open, GitHub Actions Bot tags it with appropriate label so your developers don't ever have to worry about it. Responsible workflow is located in .github/workflows/labeler.yml and labels are specified in .github/labeler.yml . Please note labels are automatically cloned from our templates after you click Use this template Verifying Semantic change are performed \u00b6 Semantic versioning/releases are possible via Conventional Commits . Our pipelines verify every commit in PR and PR title adhere to the simple standard: fix | feat [ ! ] : <change description> NOTE: We don't use scopes (and advise you not to), as these information is handled automatically by the labeling system Aforementioned checks are carried out by .github/workflows/pr-linter.yml and .github/workflows/commit-linter.yml . Unified editor settings \u00b6 Tabs or spaces? No more, .editorconfig is a well-respected standard ending this (and similar debates), so developers can focus on actual coding instead. See EditorConfig for more information and integrations with specific editors/IDEs. Linting YAML files \u00b6 YAML can be written in plethora of ways, hence enforcing one standard seems to be beneficial. Our settings of choice can be found in .yamllint.yml , but feel free to adjust them to your liking! If any .yml (or .yaml ) file is changed by Pull Request, the following .github/workflows/yaml-linter.yml is run which checks adherence to the aforementioned standard. Linting Markdown files \u00b6 Might be helpful during creating documentation, workflow responsible for it can be seen in .github/workflows/markdown-linter.yml Metadata \u00b6 Specifying your code standards and how to contribute is a nice way to encourage others to participate in your project. We provide CONTRIBUTING.md and CODE_OF_CONDUCT.md so you don't have to. :)","title":"Functionality and Configuration"},{"location":"template/functionality/#functionality-of-template","text":"Below is a detailed list of functionalities and their locations within source code (so you can modify them if you wish with ease):","title":"Functionality of template"},{"location":"template/functionality/#automated-updates","text":"These are carried out by renovatebot/renovate at least once a day. Each time a new version of any dependency of your project is released, a Pull Request will be created and merged automatically (after all tests pass of course). You can find our settings in renovate.json","title":"Automated updates"},{"location":"template/functionality/#automated-code-changes-labeling","text":"Every file/folder provided by our templates has an associated label, so you always know what kind of file was change by the PR! After a PR changing some file is open, GitHub Actions Bot tags it with appropriate label so your developers don't ever have to worry about it. Responsible workflow is located in .github/workflows/labeler.yml and labels are specified in .github/labeler.yml . Please note labels are automatically cloned from our templates after you click Use this template","title":"Automated code changes labeling"},{"location":"template/functionality/#verifying-semantic-change-are-performed","text":"Semantic versioning/releases are possible via Conventional Commits . Our pipelines verify every commit in PR and PR title adhere to the simple standard: fix | feat [ ! ] : <change description> NOTE: We don't use scopes (and advise you not to), as these information is handled automatically by the labeling system Aforementioned checks are carried out by .github/workflows/pr-linter.yml and .github/workflows/commit-linter.yml .","title":"Verifying Semantic change are performed"},{"location":"template/functionality/#unified-editor-settings","text":"Tabs or spaces? No more, .editorconfig is a well-respected standard ending this (and similar debates), so developers can focus on actual coding instead. See EditorConfig for more information and integrations with specific editors/IDEs.","title":"Unified editor settings"},{"location":"template/functionality/#linting-yaml-files","text":"YAML can be written in plethora of ways, hence enforcing one standard seems to be beneficial. Our settings of choice can be found in .yamllint.yml , but feel free to adjust them to your liking! If any .yml (or .yaml ) file is changed by Pull Request, the following .github/workflows/yaml-linter.yml is run which checks adherence to the aforementioned standard.","title":"Linting YAML files"},{"location":"template/functionality/#linting-markdown-files","text":"Might be helpful during creating documentation, workflow responsible for it can be seen in .github/workflows/markdown-linter.yml","title":"Linting Markdown files"},{"location":"template/functionality/#metadata","text":"Specifying your code standards and how to contribute is a nice way to encourage others to participate in your project. We provide CONTRIBUTING.md and CODE_OF_CONDUCT.md so you don't have to. :)","title":"Metadata"},{"location":"template/setup/","text":"Setup of template \u00b6 TLDR: Use this template without any changes! Longer version...: Click green button Use this template Name your repository however you wish (snakecase advised) Optional (but recommended): add main branch protection","title":"Setup"},{"location":"template/setup/#setup-of-template","text":"TLDR: Use this template without any changes! Longer version...: Click green button Use this template Name your repository however you wish (snakecase advised) Optional (but recommended): add main branch protection","title":"Setup of template"}]}