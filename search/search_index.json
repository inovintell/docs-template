{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"inovintell templates documentation","text":""},{"location":"#quick-usage","title":"Quick Usage","text":"<ul> <li>Click green button <code>Use this template</code></li> <li>Name your repository however you wish (snakecase advised)</li> <li>Enable <code>gh-pages</code> branch on <code>/</code> to have your documentation hosted (see here)</li> <li>Optional (but recommended): add main branch protection rules</li> <li>That is all, all functionalities below are inherited!</li> </ul> <p>For optimal experience please use language/functionality specific templates briefly described below.</p>"},{"location":"#template-generic","title":"template (Generic)","text":"<p>Use it to as base for a project written in not supported (yet) language</p> <p>Includes, amongst other things:</p> <ul> <li>Automated PR labeling based on file changes</li> <li>Automated dependency updates and management</li> <li>Automated PR &amp; commits checks in accordance to Conventional Commits</li> <li>Increased security (e.g. semgrep or step-security/harden-runner)</li> <li>Automated linting of <code>.md</code> and <code>.yml</code> files</li> <li>Metadata definitions (e.g. <code>CONTRIBUTING.md</code> guide)</li> </ul> <p>See in-depth documentation here.</p>"},{"location":"#py-template-python","title":"py-template (Python)","text":"<p>Use it for any Python project with no (minor) adjustments!</p> <p>Includes everything generic template has to offer and extends functionality by providing:</p> <ul> <li>Continuous Integration for every pull request (tests run using multiple cores!)</li> <li>Continuous Deployment (after pull request is merged) to PyPI repository of your choice</li> <li>Automated documentation creation from Python's <code>docstrings</code></li> <li>Automated code fixing and linting for every PR</li> <li>Identical <code>dev</code> experience to the created pipelines via simple <code>poetry install --all-extras</code>!</li> <li>Tunable via single <code>pyproject.toml</code> in adherence to latest Python's best practices</li> </ul> <p>See in-depth documentation here</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you:</p> <ul> <li>find any feature missing/desired</li> <li>find a bug</li> </ul> <p>Please raise a new GitHub Issue in template-specific repository or open a new Pull Request.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at here.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ. Translations are available here.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to docs-template","text":"<p>We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"CONTRIBUTING/#we-develop-with-github","title":"We Develop with Github","text":"<p>We use github to host code, to track issues and feature requests, as well as accept pull requests.</p>"},{"location":"CONTRIBUTING/#we-use-github-flow","title":"We Use Github Flow","text":"<p>Pull requests are the best way to propose changes to the codebase (we use Github Flow).</p> <p>We actively welcome your pull requests:</p> <ol> <li>Fork the repo and create your branch from <code>master</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue that pull request!</li> </ol>"},{"location":"CONTRIBUTING/#any-contributions-you-make-will-be-under-the-specified-software-license","title":"Any contributions you make will be under the specified Software License","text":"<p>License contents are located in LICENSE.md file.</p> <p>In short, when you submit code changes, your submissions are understood to be under the same license that covers the project.</p> <p>Feel free to contact the maintainers if that's a concern.</p>"},{"location":"CONTRIBUTING/#report-bugs-via-github-issues","title":"Report bugs via Github Issues","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue; it's that easy!</p>"},{"location":"CONTRIBUTING/#use-a-consistent-coding-style","title":"Use a Consistent Coding Style","text":"<p>Automated linters and checkers are run on each Pull Request in order to ensure consistent styling across the codebase.</p> <p>Please do not merge without resolving these issues first!</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the aforementioned license.</p>"},{"location":"CONTRIBUTING/#references","title":"References","text":"<p>This document was adapted from the open-source contribution guidelines created by Brian A. Danielak</p>"},{"location":"initialization/","title":"Initialization","text":"<p>What happens after I click <code>Use this template</code>?</p> <p>More or less the following (for everry template):</p> <ul> <li><code>.github/workflows/initialization.yml</code> is run</li> <li>This workflow changes every <code>{{cookiecutter.&lt;variable&gt;}}</code> to appropriate value based on your GitHub's <code>&lt;name&gt;/&lt;repo&gt;</code> (this includes folders being renamed, text being replaced and so on...)</li> <li>Leftover files (including <code>initialization.yml</code>) are removed</li> <li>Those changes are pushed back to the repository by GitHub Actions Bot</li> <li>Labels used for automated change labeling are cloned from our source repository</li> </ul> <p>The best thing - it is automated, you don't even have to think about it!</p>"},{"location":"py-template/coverage/","title":"Adjusting coverage","text":"<p>Currently coverage is set to <code>100%</code>, both within local pipeline and the CI.</p> <p>This threshold might be undesirable in many cases, this document describes how one might adjust it.</p> <p>Upcoming sections change coverage threshold to <code>90%</code>.</p>"},{"location":"py-template/coverage/#1-adjust-precommit","title":"1. Adjust <code>precommit</code>","text":"<p>Modify <code>.pre-commit-config.yaml</code> file, specifically <code>python-tests</code> entry:</p> <pre><code># Around the bottom of the file\n- id: python-tests\nverbose: true\nname: Python Tests\n# Adjust --cov-fail-under to anything between 0 to 100\nentry: &gt;\npoetry run pytest -n auto --pretty --cov=src\n--cov-fail-under=90--cov-report=term-missing test\npass_filenames: false\nlanguage: system\nstages:\n- commit\ntypes:\n- python\n</code></pre>"},{"location":"py-template/coverage/#2-adjust-github-actions","title":"2. Adjust GitHub Actions","text":"<p>Modify <code>.github/workflows/python-tests.yml</code>, bottom of the file, by adding the following argument to the action as presented below:</p> <pre><code>- name: Upload combined coverage\nuses: ./.github/actions/python-coverage\nwith:\nfail-under: 90\n</code></pre> <p>That's it, now your coverage checks should be at 90%!</p>"},{"location":"py-template/functionality/","title":"Functionality of py-template","text":"<p>Please see template/functionality for base functionality, this templates only adjusts and extends them to be more useful for Python!</p> <p>Below is a detailed list of functionalities and their source files (so you can modify them if you wish with ease), functionalities provided by template are not repeated here!</p>"},{"location":"py-template/functionality/#local-development","title":"Local development","text":"<p>In order to have the exact same configuration as is run in <code>pipelines</code> described below do the following:</p> <ol> <li>clone your repository</li> <li>run <code>poetry install --all-extras</code></li> </ol> <p>Now you are able to <code>autofix</code>/<code>lint</code>/<code>run tests</code> in the exact same way!</p> <p>Note: you might have to read the following sections to see commands being run, although most of it is specified via <code>pyproject.toml</code>.</p>"},{"location":"py-template/functionality/#tooling-configuration","title":"Tooling configuration","text":"<p>All of the easily tunable parameters are located in <code>pyproject.toml</code> including:</p> <ul> <li>Tests dependencies/settings</li> <li>Automated fixers dependencies/settings</li> <li>Linters dependencies/settings</li> <li>Code statistics reporting</li> <li>Documentation creation/styling</li> <li>Semantic release</li> </ul>"},{"location":"py-template/functionality/#automated-code-fixinglinting","title":"Automated code fixing/linting","text":"<p>After opening a PR your code will be subject to the following:</p> <ul> <li>Whatever is possible will be fixed and pushed back to the branch (e.g. <code>black</code> formatting, removing unused <code>import</code>s etc.)</li> <li>Linters are run on formatted version to find errors which we are unable to fix automatically</li> <li>Code statistics are performed and saved as GitHub Job Summaries</li> </ul> <p>Note: Please do a <code>git pull</code> from remote branch before pushing more code to the branch due to automated fixers!</p> <p>Pipeline is defined in <code>.github/workflows/python-code-checker.yml</code> while settings are defined in <code>pyproject.toml</code> (code comment sections Fixers, Linters and Reporters)</p>"},{"location":"py-template/functionality/#continuous-integration","title":"Continuous Integration","text":"<p>We provide a dummy folder <code>tests</code>, where all of your <code>pytest</code>s should reside (you might also describe testing procedures via generated <code>README.md</code> ).</p> <p>After every Pull Request the following pipeline is run:</p> <ul> <li>Tests are run across matrix of <code>python</code> and <code>os</code> versions (last three minor versions and <code>ubuntu-latest</code>/<code>macos-latest</code>)</li> <li>Coverage is calculated for every item and uploaded as a HTML artifact (also available within job's <code>stdout</code>)</li> <li>Coverage is combined and uploaded as a HTML artifact (also available within job's <code>stdout</code>)</li> </ul> <p>See <code>.github/actions/python-test/action.yml</code> for core functionality and <code>.github/workflows/python-tests.yml</code> for its usage in a workflow.</p>"},{"location":"py-template/functionality/#continuous-deployment","title":"Continuous Deployment","text":"<p>After a PR is thoroughly checked (and merged), <code>py-template</code> will take care of deploying your <code>python</code> package to <code>registry</code> of your choice (see Setup section).</p> <p>Please see <code>.github/workflows/python-release.yml</code> for the pipeline functionality.</p>"},{"location":"py-template/functionality/#automated-documentation-generation","title":"Automated documentation generation","text":"<p>Every documented function will automatically be added to <code>API Reference</code> section, which is modeled after your source code. This action is performed after Continuous Deployment ran successfully.</p> <p>One can see the script responsible for docs creation in <code>docs/gen_ref_pages.py</code> .</p> <p>In general, simply add code to <code>src/&lt;repo-name&gt;</code> source files and watch it automagically appear via <code>mkdocs.yml</code></p> <p>Please note we are also validating whether you have sufficiently documented your code via the following automated action: <code>.github/workflows/python-docstrings-coverage.yml</code> (anything below <code>100</code> won't pass, fortunately it is easily tunable :) ).</p>"},{"location":"py-template/functionality/#caching-additional-info-advanced","title":"Caching (additional info, advanced)","text":"<p>We tried our best in order to improve pipelines efficiency as much as possible. In order to do that, we have created a two level caching mechanism:</p> <ul> <li><code>pipx</code> is cached on a per-<code>python</code>, per-<code>os</code> level</li> <li><code>poetry</code> is cached on a per-<code>python</code>, per-<code>os</code> level</li> </ul> <p>This means initial pass of your actions might be a lot slower (even a few minutes), but afterwards everything will be simply downloaded from cache.</p> <p>To see how we did it (or modify/improve it), check <code>.github/actions/setup-poetry/action.yml</code> .</p>"},{"location":"py-template/integration/","title":"Integration with existing projects","text":"<p>Make sure you went over features section before diving right in!</p> <p>While <code>py-template</code> is best suited as a base for new projects, you can also integrate with existing ones (unfortunately not as easily).</p>"},{"location":"py-template/integration/#general-guidelines","title":"General guidelines","text":"<p>Steps below should be performed in addition to setup steps!</p> <p>You might want to initialize an empty \"dummy\" repo to have initialized elements to choose from</p> <p>While the steps are not as straightforward, a rough guideline could be summarized as:</p> <ul> <li>Move your code to <code>/src/&lt;project_name&gt;</code> (keep <code>_version.py</code> and import it in a similar fashion to <code>__init__.py</code> )</li> <li>Move your <code>tests</code> to <code>tests</code> folder (given they use <code>pytest</code>)</li> <li>Copy whole <code>.github</code> folder as-is (keep in mind you might have to perform a few manual adjustments depending on your project)</li> <li>Copy <code>pyproject.toml</code> and specify your dependencies/optional dependencies in appropriate sections under <code>[tool.poetry.dependencies]</code> and commit <code>poetry.lock</code> after you do that!</li> <li>Copy <code>gen_ref_pages.py</code> to <code>/docs</code> folder (automated documentation creation)</li> <li>Copy <code>renovate.json</code> and enable renovate bot (unless you have one already setup)</li> <li>Copy <code>.yamllint.yml</code> (unless you have one already setup)</li> <li>Copy <code>.gitignore</code> (unless you have one already setup)</li> <li>Copy <code>.editorconfig</code> (unless you have one already setup)</li> </ul> <p>Feel free to open an Issue with your repository and a short description of desired effect and we will try to help you with the adjustment process!</p>"},{"location":"py-template/setup/","title":"Setup of py-template","text":"<p>TLDR: same as <code>README.md</code>, but needs GitHub Actions Secrets set on a repo/organization level.</p> <p>WARNING: use repository name which is ABSENT from pypi.org or package index of your choosing.</p>"},{"location":"py-template/setup/#initial-setup","title":"Initial Setup","text":"<ul> <li>Click green button <code>Use this template</code></li> <li>Name your repository, but remember to use NAME ABSENT in pypi.org and use <code>snake_case</code> for a name!</li> <li>Enable <code>gh-pages</code> branch on <code>/</code> to have your documentation hosted (see here)</li> <li>Enable hosted <code>renovatebot</code>, see here</li> <li>Optional (but recommended): add main branch protection rules</li> </ul>"},{"location":"py-template/setup/#setup-credentials-for-semantic-release-to-pypi","title":"Setup Credentials for Semantic Release to PyPI","text":"<p>If you don't want to release your package, you don't have to perform this step!</p> <p>Please add to your repository's Encrypted Secrets the following:</p> <ul> <li><code>PYPI_NAME</code> - any name of package index, e.g. <code>pypi</code> or <code>test-pypi</code></li> <li> <p><code>PYPI_URL</code> - <code>url</code> to hosting:</p> </li> <li> <p><code>https://test.pypi.org/legacy/</code> - for <code>test-pypi</code></p> </li> <li> <p><code>https://pypi.org/legacy/</code> - for <code>pypi</code></p> </li> <li> <p><code>PYPI_TOKEN</code> - account-wide token allowing for package creation</p> </li> </ul>"},{"location":"py-template/setup/#additionally-for-gemfurycom","title":"Additionally for <code>gemfury.com</code>","text":"<p>To upload to <code>gemfury.com</code> package registry one has to manually add:</p> <pre><code>poetry config http-basic.dialogue ${{ secrets.PYPI_TOKEN }} ${{ secrets.PYPI_TOKEN }}\n</code></pre> <p>as the first command in <code>Deploy to registry</code> here .</p>"},{"location":"template/functionality/","title":"Functionality of template","text":"<p>Below is a detailed list of functionalities and their locations within source code (so you can modify them if you wish with ease):</p>"},{"location":"template/functionality/#automated-dependency-updates","title":"Automated dependency updates","text":"<p>These are carried out by renovatebot/renovate at least once a day.</p> <p>Each time a new version of any <code>dependency</code> of your project is released, a <code>pull request</code> will be created and merged automatically (after all the tests turn green).</p> <p>You can find our settings in <code>renovate.json</code> and adjust them to your liking.</p>"},{"location":"template/functionality/#automated-labeling","title":"Automated labeling","text":"<p>Every file/folder provided by our templates has an associated github <code>label</code>, so you always know what kind of file was change by the PR (see here for an example list of GitHub labels).</p> <p>After a <code>pull request</code> is open, GitHub Actions Bot tags it with appropriate label for easier change discovery.</p> <p>Workflow carrying out these actions is located in <code>.github/workflows/labeler.yml</code> and labels are specified in <code>.github/labeler.yml</code>.</p> <p>Please note labels are automatically cloned from our templates after you click <code>Use this template</code>.</p>"},{"location":"template/functionality/#semantic-pull-requestscommits","title":"Semantic Pull Requests/commits","text":"<p>Semantic versioning/releases are possible via Conventional Commits.</p> <p>Our pipelines verify every commit in <code>pull request</code> and its' title adhere to this simple standard:</p> <pre><code>fix|feat[!]: &lt;change description&gt;\n</code></pre> <p>which are tailored to:</p> <ul> <li><code>PATCH</code> - e.g. <code>fix: remove typo</code></li> <li><code>MINOR</code> - e.g. <code>feat: add new security pipeline</code></li> <li><code>MAJOR</code> - e.g. <code>fix!: remove predict_proba method</code></li> </ul> <p>If you are not sure what this means, you can read more about <code>semver</code> here.</p> <p>NOTE:</p> <p>We don't use <code>scopes</code> (and advise you not to), as this type of information is handled automatically by the labeling system</p> <p>Aforementioned checks are carried out by <code>.github/workflows/pr-linter.yml</code> and <code>.github/workflows/commit-linter.yml</code> .</p>"},{"location":"template/functionality/#unified-editor-settings","title":"Unified editor settings","text":"<p>Tabs or spaces? <code>.editorconfig</code> is a well-respected standard ending this debate, so developers can focus on actual coding instead with repository-wide defaults.</p> <p>See EditorConfig for more information and integrations with specific editors/IDEs.</p>"},{"location":"template/functionality/#linting-yaml-files","title":"Linting YAML files","text":"<p>YAML might be written in a plethora of ways, hence enforcing one standard will improve readability across the codebase.</p> <p>Our settings of choice can be found in <code>.yamllint.yml</code>, but feel free to adjust them to your liking!</p> <p>If any <code>.yml</code> (or <code>.yaml</code>) file is changed by <code>pull request</code>, the following workflow <code>.github/workflows/yaml-linter.yml</code> is run which lints your code.</p>"},{"location":"template/functionality/#linting-markdown-files","title":"Linting Markdown files","text":"<p>Helpful during documentation creation (like this one!), workflow responsible for it can be seen in <code>.github/workflows/markdown-linter.yml</code> .</p>"},{"location":"template/functionality/#metadata","title":"Metadata","text":"<p>Specifying your coding standards and how to contribute is a welcoming way to encourage others to participate in your project.</p> <p>We provide <code>CONTRIBUTING.md</code> and <code>CODE_OF_CONDUCT.md</code> so you don't have to. :)</p>"},{"location":"template/functionality/#security","title":"Security","text":"<p>We provide various security functionalities, including, but not limited to Supply Chain Attacks protection</p> <p>It is provided by <code>stepsecurity/harder-runner</code> open source projects for every action in the repository, for example:</p> <pre><code>- name: Harden Runner\n  uses: step-security/harden-runner@dd2c410b088af7c0dc8046f3ac9a8f4148492a95 # tag=v1.4.5\n  with:\n    egress-policy: block\n    allowed-endpoints: &gt;\n      api.github.com:443\n      github.com:443\n</code></pre> <p>will block any outgoing connections from the workflow if the endpoints differ from the two specified.</p> <p>Please note we are pinning actions by hashes of commits, which is another security measure</p>"},{"location":"template/setup/","title":"Setup of template","text":"<p>TLDR: Use this template without any changes!</p> <p>Longer version...:</p> <ul> <li>Click green button <code>Use this template</code></li> <li>Name your repository however you wish (snakecase advised)</li> <li>Enable <code>gh-pages</code> branch on <code>/</code> to have your documentation hosted (see here)</li> <li>Enable hosted <code>renovatebot</code>, see here</li> <li>Optional (but recommended): add main branch protection rules</li> </ul>"}]}